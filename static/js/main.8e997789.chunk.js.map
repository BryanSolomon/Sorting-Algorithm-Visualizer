{"version":3,"sources":["SortingAlgorithms/quickSort.js","SortingAlgorithms/heapSort.js","SortingAlgorithms/insertionSort.js","SortingAlgorithms/mergeSort.js","SortingArray.jsx","SortingAlgorithms/bubbleSort.js","SortingAlgorithms/selectionSort.js","App.js","serviceWorker.js","index.js"],"names":["partition","arr","start","end","animation","pivot","pi","i","push","swap","j","temp","heapify","n","largest","l","r","insertionSortAnimation","length","key","mergeSort","m","Math","floor","merge","n1","n2","L","Lindex","R","Rindex","k","inProgress","SortingArray","props","state","array","sorted","generateArray","bind","this","randomNumber","setState","algorithm","bubbleSortAnimation","quickSortAnimation","heapSortAnimation","min","selectionSortAnimation","bars","document","getElementsByClassName","index1","index2","index1Style","style","index2Style","setTimeout","height","backgroundColor","mergeSortAnimation","console","log","index","newHeight","indexStyle","className","onClick","animateSortingAlgorithm","animationOtherAlgorithms","map","Component","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAUMA,G,MAAY,SAACC,EAAKC,EAAOC,EAAKC,GAGhC,IAFA,IAAMC,EAAQJ,EAAIE,GACdG,EAAKJ,EACAK,EAAIL,EAAOK,EAAIJ,IAAOI,EACvBN,EAAIM,IAAMF,GACVD,EAAUI,KAAK,CAACD,EAAGD,GAAI,IACvBG,EAAKR,EAAKM,EAAGD,GACbA,KAEAF,EAAUI,KAAK,CAACD,EAAGD,GAAI,IAK/B,OAFAF,EAAUI,KAAK,CAACF,EAAIH,GAAK,IACzBM,EAAKR,EAAKK,EAAIH,GACPG,IAGLG,EAAO,SAACR,EAAKM,EAAGG,GAClB,IAAMC,EAAOV,EAAIM,GACjBN,EAAIM,GAAKN,EAAIS,GACbT,EAAIS,GAAKC,GCfPC,EAAU,SAAVA,EAAWX,EAAKY,EAAGN,EAAGH,GACxB,IAAIU,EAAUP,EACRQ,EAAI,EAAIR,EAAI,EACZS,EAAI,EAAIT,EAAI,EAUlB,GARIQ,EAAIF,GAAKZ,EAAIc,GAAKd,EAAIa,KACtBA,EAAUC,GAGVC,EAAIH,GAAKZ,EAAIe,GAAKf,EAAIa,KACtBA,EAAUE,GAGVF,IAAYP,EAAG,CACf,IAAME,EAAOR,EAAIM,GACjBN,EAAIM,GAAKN,EAAIa,GACbb,EAAIa,GAAWL,EACfL,EAAUI,KAAK,CAACD,EAAGO,GAAS,IAC5BV,EAAYQ,EAAQX,EAAKY,EAAGC,EAASV,QAErCA,EAAUI,KAAK,CAACD,EAAGO,GAAS,IAEhC,OAAOV,GCrCEa,EAAyB,SAAChB,EAAKG,GAExC,IADA,IAAMS,EAAIZ,EAAIiB,OACLX,EAAI,EAAGA,EAAIM,IAAKN,EAAG,CAIxB,IAHA,IAAIY,EAAMlB,EAAIM,GACVG,EAAIH,EAAI,EAELG,GAAK,GAAKT,EAAIS,GAAKS,GACtBf,EAAUI,KAAK,CAACE,EAAI,EAAGT,EAAIS,KAC3BT,EAAIS,EAAI,GAAKT,EAAIS,GACjBA,GAAK,EAETN,EAAUI,KAAK,CAACE,EAAI,EAAGS,IACvBlB,EAAIS,EAAI,GAAKS,EAEjB,OAAOf,GCNLgB,EAAY,SAAZA,EAAanB,EAAKc,EAAGC,EAAGZ,GAC1B,GAAIW,IAAMC,EAAV,CAGA,IAAMK,EAAIC,KAAKC,OAAOR,EAAIC,GAAK,GAC/BI,EAAUnB,EAAKc,EAAGM,EAAGjB,GACrBgB,EAAUnB,EAAKoB,EAAI,EAAGL,EAAGZ,GACzBoB,EAAMvB,EAAKc,EAAGM,EAAGL,EAAGZ,KAMlBoB,EAAQ,SAACvB,EAAKc,EAAGM,EAAGL,EAAGZ,GAQzB,IAPA,IAAMqB,EAAKJ,EAAIN,EAAI,EACbW,EAAKV,EAAIK,EACTM,EAAI,GACJC,EAAS,GACTC,EAAI,GACJC,EAAS,GAENvB,EAAI,EAAGA,EAAIkB,IAAMlB,EACtBoB,EAAEnB,KAAKP,EAAIc,EAAIR,IACfqB,EAAOpB,KAAKO,EAAIR,GAEpB,IAAK,IAAIA,EAAI,EAAGA,EAAImB,IAAMnB,EACtBsB,EAAErB,KAAKP,EAAIoB,EAAI,EAAId,IACnBuB,EAAOtB,KAAKa,EAAI,EAAId,GAOxB,IAJA,IAAIA,EAAI,EACJG,EAAI,EACJqB,EAAIhB,EAEDR,EAAIkB,GAAMf,EAAIgB,GACbC,EAAEpB,IAAMsB,EAAEnB,IACVT,EAAI8B,GAAKJ,EAAEpB,GACXH,EAAUI,KAAK,CAACuB,EAAGJ,EAAEpB,KACrBA,MAEAN,EAAI8B,GAAKF,EAAEnB,GACXN,EAAUI,KAAK,CAACuB,EAAGF,EAAEnB,KACrBA,KAEJqB,IAGJ,KAAOxB,EAAIkB,GACPxB,EAAI8B,GAAKJ,EAAEpB,GACXH,EAAUI,KAAK,CAACuB,EAAGJ,EAAEpB,KACrBA,IACAwB,IAGJ,KAAOrB,EAAIgB,GACPzB,EAAI8B,GAAKF,EAAEnB,GACXN,EAAUI,KAAK,CAACuB,EAAGF,EAAEnB,KACrBA,IACAqB,KClDJC,GAAa,EAEXC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPC,OAAQ,MAEZ,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBANN,E,gEAUfC,KAAKF,kB,sCAOL,IAAIN,EAAJ,CAIA,IADA,IAAM/B,EAAM,GACHM,EAAI,EAAGA,EAAI,MAAOA,EACvBN,EAAIO,KAAKiC,EAAa,EAAG,MAE7BD,KAAKE,SAAS,CACVN,MAAOnC,EACPoC,QAAQ,O,8CAQQM,GAAY,IAAD,OAC/B,IAA0B,IAAtBH,KAAKL,MAAME,OAAf,CAGAL,GAAa,EACb,IAAI5B,EAAY,GAChB,OAAQuC,GACJ,IAAK,SACDvC,EC7DmB,SAACH,GAGhC,IAFA,IAAIG,EAAY,GACZS,EAAIZ,EAAIiB,OACHX,EAAI,EAAGA,EAAIM,EAAI,EAAGN,IACvB,IAAK,IAAIG,EAAI,EAAGA,EAAIG,EAAIN,EAAI,EAAGG,IAAK,CAChC,IAAIqB,EAAIrB,EAAI,EACZ,GAAIT,EAAIS,GAAKT,EAAI8B,GAAI,CACjB,IAAMpB,EAAOV,EAAIS,GACjBT,EAAIS,GAAKT,EAAI8B,GACb9B,EAAI8B,GAAKpB,EACTP,EAAUI,KAAK,CAACE,EAAGqB,GAAG,SAEtB3B,EAAUI,KAAK,CAACE,EAAGqB,GAAG,IAIlC,OAAO3B,ED6CiBwC,CAAoBJ,KAAKL,MAAMC,OAC3C,MACJ,IAAK,QACDhC,EJ/DkB,SAArByC,EAAsB5C,EAAKC,EAAOC,EAAKC,GAChD,GAAIF,EAAQC,EAAK,CACb,IAAMG,EAAKN,EAAUC,EAAKC,EAAOC,EAAKC,GACtCyC,EAAmB5C,EAAKC,EAAOI,EAAK,EAAGF,GACvCyC,EAAmB5C,EAAKK,EAAK,EAAGH,EAAKC,GAEzC,OAAOA,EIyDiByC,CAAmBL,KAAKL,MAAMC,MAAO,EAAGI,KAAKL,MAAMC,MAAMlB,OAAS,EAAGd,GACjF,MACJ,IAAK,OACDA,EHnEiB,SAACH,EAAKG,GAEnC,IADA,IAAMS,EAAIZ,EAAIiB,OACLX,EAAIM,EAAI,EAAI,EAAGN,GAAK,IAAKA,EAC9BH,EAAYQ,EAAQX,EAAKY,EAAGN,EAAGH,GAEnC,IAAK,IAAIG,EAAIM,EAAI,EAAGN,EAAI,IAAKA,EAAG,CAC5B,IAAMI,EAAOV,EAAI,GACjBA,EAAI,GAAKA,EAAIM,GACbN,EAAIM,GAAKI,EACTP,EAAUI,KAAK,CAAC,EAAGD,GAAG,IACtBH,EAAYQ,EAAQX,EAAKM,EAAG,EAAGH,GAEnC,OAAOA,EGuDiB0C,CAAkBN,KAAKL,MAAMC,MAAOhC,GAChD,MACJ,IAAK,YACDA,EEtEsB,SAACH,EAAKG,GAExC,IADA,IAAMS,EAAIZ,EAAIiB,OACLX,EAAI,EAAGA,EAAIM,EAAI,IAAKN,EAAG,CAE5B,IADA,IAAIwC,EAAMxC,EACDG,EAAIH,EAAI,EAAGG,EAAIG,IAAKH,EACrBT,EAAIS,GAAKT,EAAI8C,KACbA,EAAMrC,GAGVN,EAAUI,KAAK,CAACE,EAAGA,GAAG,IAE1B,IAAMC,EAAOV,EAAI8C,GACjB9C,EAAI8C,GAAO9C,EAAIM,GACfN,EAAIM,GAAKI,EACTP,EAAUI,KAAK,CAACuC,EAAKxC,GAAG,IAE5B,OAAOH,EFsDiB4C,CAAuBR,KAAKL,MAAMC,MAAOhC,GACrD,MACJ,IAAK,YACDA,EAAYa,EAAuBuB,KAAKL,MAAMC,MAAOhC,GACrD,MACJ,QACI,OAER,IAzB+B,eAyBtBG,GACL,IAAM0C,EAAOC,SAASC,uBAAuB,OA1BlB,cA2BI/C,EAAUG,GA3Bd,GA2BpB6C,EA3BoB,KA2BZC,EA3BY,KA2BJ5C,EA3BI,KA4BrB6C,EAAcL,EAAKG,GAAQG,MAC3BC,EAAcP,EAAKI,GAAQE,MAC7B9C,GACAgD,YAAW,WACP,IAAI9C,EAAO2C,EAAYI,OACvBJ,EAAYI,OAASF,EAAYE,OACjCF,EAAYE,OAAS/C,IAxE3B,EAyEKJ,GAEPkD,YAAW,WACPH,EAAYK,gBAAkB,MAC9BH,EAAYG,gBAAkB,QA7EhC,EA8ECpD,GACHkD,YAAW,WACPH,EAAYK,gBAAkB,YAC9BH,EAAYG,gBAAkB,cAjFhC,EAkFCpD,EAAY,IAnBVA,EAAI,EAAGA,EAAIH,EAAUc,SAAUX,EAAI,EAAnCA,GAqBTkD,YAAW,WACP,EAAKf,SAAS,CACVL,QAAQ,IAEZL,GAAa,IAxFX,EAyFH5B,EAAUc,W,+CAQQyB,GAAY,IAAD,OAChC,IAA0B,IAAtBH,KAAKL,MAAME,OAAf,CAGA,IAAIjC,EAAY,GACE,UAAduC,EACAvC,EDtHsB,SAACH,EAAKG,GACpC,OAAIH,EAAIiB,OAAS,EACNjB,GAEXmB,EAAUnB,EAAK,EAAGA,EAAIiB,OAAS,EAAGd,GAC3BA,GCiHawD,CAAmBpB,KAAKL,MAAMC,MAAOhC,GAC5B,cAAduC,IACPvC,EAAYa,EAAuBuB,KAAKL,MAAMC,MAAOhC,IAEzDyD,QAAQC,IAAI1D,GACZ,IAXgC,eAWvBG,GACL,IAAM0C,EAAOC,SAASC,uBAAuB,OAZjB,cAaD/C,EAAUG,GAbT,GAarBwD,EAbqB,KAadC,EAbc,KActBC,EAAahB,EAAKc,GAAOR,MAC/BE,YAAW,WACPQ,EAAWP,OAAX,UAAuBM,EAAvB,QAjHF,EAkHCzD,GACHkD,YAAW,WACPQ,EAAWN,gBAAkB,QApH/B,EAqHCpD,GACHkD,YAAW,WACPQ,EAAWN,gBAAkB,cAvH/B,EAwHCpD,EAAY,IAZVA,EAAI,EAAGA,EAAIH,EAAUc,OAAS,IAAKX,EAAI,EAAvCA,GAcTkD,YAAW,WACP,EAAKf,SAAS,CACVL,QAAQ,MA5HV,EA8HHjC,EAAUc,W,+BAGP,IAAD,OACL,OACI,6BACI,yBAAKgD,UAAU,UACX,0BAAMA,UAAU,QAAhB,gCACA,wBAAIA,UAAU,QACV,4BAAI,4BAAQA,UAAU,YAAYC,QAAS,kBAAMnC,EAAa,KAAO,EAAKM,kBAAtE,uBACJ,4BAAI,4BAAQ6B,QAAS,kBAAMnC,EAAa,KAAO,EAAKoC,wBAAwB,YAAxE,gBACJ,4BAAI,4BAAQD,QAAS,kBAAMnC,EAAa,KAAO,EAAKoC,wBAAwB,WAAxE,eACJ,4BAAI,4BAAQD,QAAS,kBAAMnC,EAAa,KAAO,EAAKoC,wBAAwB,UAAxE,cACJ,4BAAI,4BAAQD,QAAS,kBAAMnC,EAAa,KAAO,EAAKqC,yBAAyB,WAAzE,eACJ,4BAAI,4BAAQF,QAAS,kBAAMnC,EAAa,KAAO,EAAKoC,wBAAwB,eAAxE,mBACJ,4BAAI,4BAAQD,QAAS,kBAAMnC,EAAa,KAAO,EAAKqC,yBAAyB,eAAzE,qBAGZ,yBAAKH,UAAU,aACV1B,KAAKL,MAAMC,MAAMkC,KAAI,SAAC/D,EAAGY,GAAJ,OAClB,yBACI+C,UAAU,MACV/C,IAAKA,EACLoC,MAAO,CAAEG,OAAO,GAAD,OAAKnD,EAAL,kB,GAlJhBgE,aA6JrB9B,EAAe,SAACM,EAAKyB,GACvB,OAAOlD,KAAKC,MAAMD,KAAKmD,UAAYD,EAAMzB,GAAOA,IAGrCd,IGxKAyC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCMcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.8e997789.chunk.js","sourcesContent":["\r\nexport const quickSortAnimation = (arr, start, end, animation) => {\r\n    if (start < end) {\r\n        const pi = partition(arr, start, end, animation);\r\n        quickSortAnimation(arr, start, pi - 1, animation);\r\n        quickSortAnimation(arr, pi + 1, end, animation);\r\n    }\r\n    return animation\r\n}\r\n\r\nconst partition = (arr, start, end, animation) => {\r\n    const pivot = arr[end];\r\n    var pi = start\r\n    for (let i = start; i < end; ++i) {\r\n        if (arr[i] <= pivot) {\r\n            animation.push([i, pi, true])//these indexes will be swapped\r\n            swap(arr, i, pi)\r\n            pi++\r\n        } else {\r\n            animation.push([i, pi, false])//these indexes will still be compared but not swapped\r\n        }\r\n    }\r\n    animation.push([pi, end, true])//these indexes will be swapped\r\n    swap(arr, pi, end)\r\n    return pi\r\n}\r\n\r\nconst swap = (arr, i, j) => {\r\n    const temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n}","export const heapSortAnimation = (arr, animation) => {\r\n    const n = arr.length\r\n    for (let i = n / 2 - 1; i >= 0; --i) {\r\n        animation = heapify(arr, n, i, animation)\r\n    }\r\n    for (let i = n - 1; i > 0; --i) {\r\n        const temp = arr[0];\r\n        arr[0] = arr[i]\r\n        arr[i] = temp\r\n        animation.push([0, i, true])\r\n        animation = heapify(arr, i, 0, animation)\r\n    }\r\n    return animation\r\n}\r\n\r\nconst heapify = (arr, n, i, animation) => {\r\n    let largest = i\r\n    const l = 2 * i + 1\r\n    const r = 2 * i + 2\r\n\r\n    if (l < n && arr[l] > arr[largest]) {\r\n        largest = l\r\n    }\r\n\r\n    if (r < n && arr[r] > arr[largest]) {\r\n        largest = r\r\n    }\r\n\r\n    if (largest !== i) {\r\n        const swap = arr[i]\r\n        arr[i] = arr[largest]\r\n        arr[largest] = swap\r\n        animation.push([i, largest, true])//these indexes will be swapped\r\n        animation = heapify(arr, n, largest, animation)\r\n    } else {\r\n        animation.push([i, largest, false])//these indexes will still be compared but not swapped\r\n    }\r\n    return animation\r\n}","export const insertionSortAnimation = (arr, animation) => {\r\n    const n = arr.length\r\n    for (let i = 1; i < n; ++i) {\r\n        let key = arr[i]\r\n        let j = i - 1\r\n\r\n        while (j >= 0 && arr[j] > key) {\r\n            animation.push([j + 1, arr[j]])//pushes index and new height into array intead of indexes to be swapped\r\n            arr[j + 1] = arr[j]\r\n            j -= 1\r\n        }\r\n        animation.push([j + 1, key])//pushes index and new height into array intead of indexes to be swapped\r\n        arr[j + 1] = key\r\n    }\r\n    return animation\r\n}","export const mergeSortAnimation = (arr, animation) => {\r\n    if (arr.length < 2) {\r\n        return arr\r\n    }\r\n    mergeSort(arr, 0, arr.length - 1, animation)\r\n    return animation\r\n}\r\n\r\nconst mergeSort = (arr, l, r, animation) => {\r\n    if (l === r) {\r\n        return\r\n    }\r\n    const m = Math.floor((l + r) / 2)\r\n    mergeSort(arr, l, m, animation)\r\n    mergeSort(arr, m + 1, r, animation)\r\n    merge(arr, l, m, r, animation)\r\n}\r\n\r\n/*\r\n * pushes index and new height into array intead of indexes to be swapped\r\n */\r\nconst merge = (arr, l, m, r, animation) => {\r\n    const n1 = m - l + 1\r\n    const n2 = r - m\r\n    const L = []\r\n    const Lindex = []\r\n    const R = []\r\n    const Rindex = []\r\n\r\n    for (let i = 0; i < n1; ++i) {\r\n        L.push(arr[l + i])\r\n        Lindex.push(l + i)\r\n    }\r\n    for (let i = 0; i < n2; ++i) {\r\n        R.push(arr[m + 1 + i])\r\n        Rindex.push(m + 1 + i)\r\n    }\r\n\r\n    let i = 0\r\n    let j = 0\r\n    let k = l\r\n\r\n    while (i < n1 && j < n2) {\r\n        if (L[i] <= R[j]) {\r\n            arr[k] = L[i]\r\n            animation.push([k, L[i]])\r\n            i++\r\n        } else {\r\n            arr[k] = R[j]\r\n            animation.push([k, R[j]])\r\n            j++\r\n        }\r\n        k++\r\n    }\r\n\r\n    while (i < n1) {\r\n        arr[k] = L[i]\r\n        animation.push([k, L[i]])\r\n        i++\r\n        k++\r\n    }\r\n\r\n    while (j < n2) {\r\n        arr[k] = R[j]\r\n        animation.push([k, R[j]])\r\n        j++\r\n        k++\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport \"./SortingStyle.css\"\r\nimport { bubbleSortAnimation } from \"./SortingAlgorithms/bubbleSort\"\r\nimport { quickSortAnimation } from './SortingAlgorithms/quickSort'\r\nimport { heapSortAnimation } from \"./SortingAlgorithms/heapSort\"\r\nimport { selectionSortAnimation } from './SortingAlgorithms/selectionSort'\r\nimport { insertionSortAnimation } from './SortingAlgorithms/insertionSort'\r\nimport { mergeSortAnimation } from './SortingAlgorithms/mergeSort'\r\n/**\r\n * Project: Sorting Algorithm visualizer\r\n * Author: Bryan Solomon\r\n * \r\n * This webapp simulates different sorting algorithms in\r\n * using randomly generates arrays\r\n */\r\nconst SPEED = 5 //animation speed in miliseconds \r\nvar inProgress = false\r\n\r\nclass SortingArray extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            sorted: null,\r\n        }\r\n        this.generateArray = this.generateArray.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateArray()\r\n    }\r\n\r\n    /** \r\n     * Generates random values and pushes them into array\r\n     */\r\n    generateArray() {\r\n        if (inProgress) {\r\n            return\r\n        }\r\n        const arr = [];\r\n        for (let i = 0; i < 140; ++i) {\r\n            arr.push(randomNumber(5, 525))\r\n        }\r\n        this.setState({\r\n            array: arr,\r\n            sorted: false\r\n        })\r\n    }\r\n    /** \r\n     * An animation array is filled with indexes and a boolean swap of that the algorithm(s) \r\n     * go through to sort array. If swap is true, the array heights at those index are swapped. \r\n     * Otherwise they will still be colored red to indecate being compared, but won't be swapped\r\n     */\r\n    animateSortingAlgorithm(algorithm) {\r\n        if (this.state.sorted === true) {\r\n            return\r\n        }\r\n        inProgress = true\r\n        let animation = []\r\n        switch (algorithm) {\r\n            case \"bubble\":\r\n                animation = bubbleSortAnimation(this.state.array)\r\n                break\r\n            case \"quick\":\r\n                animation = quickSortAnimation(this.state.array, 0, this.state.array.length - 1, animation)\r\n                break\r\n            case \"heap\":\r\n                animation = heapSortAnimation(this.state.array, animation)\r\n                break\r\n            case \"selection\":\r\n                animation = selectionSortAnimation(this.state.array, animation)\r\n                break\r\n            case \"insertion\":\r\n                animation = insertionSortAnimation(this.state.array, animation)\r\n                break\r\n            default:\r\n                return\r\n        }\r\n        for (let i = 0; i < animation.length; ++i) {\r\n            const bars = document.getElementsByClassName('bar')\r\n            const [index1, index2, swap] = animation[i]\r\n            const index1Style = bars[index1].style\r\n            const index2Style = bars[index2].style\r\n            if (swap) {\r\n                setTimeout(() => {\r\n                    let temp = index1Style.height\r\n                    index1Style.height = index2Style.height\r\n                    index2Style.height = temp\r\n                }, i * SPEED);\r\n            }\r\n            setTimeout(() => {\r\n                index1Style.backgroundColor = \"red\"\r\n                index2Style.backgroundColor = \"red\"\r\n            }, i * SPEED);\r\n            setTimeout(() => {\r\n                index1Style.backgroundColor = \"turquoise\"\r\n                index2Style.backgroundColor = \"turquoise\"\r\n            }, i * SPEED + 8);\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                sorted: true,\r\n            })\r\n            inProgress = false\r\n        }, animation.length * SPEED);\r\n    }\r\n\r\n    /** \r\n     * Merge sort and insertion sort do not swap values, so the animation process is different. \r\n     * The animation array will contain index and new height, and this function will override \r\n     * the height at those indexes with the new height\r\n     */\r\n    animationOtherAlgorithms(algorithm) {\r\n        if (this.state.sorted === true) {\r\n            return\r\n        }\r\n        let animation = []\r\n        if (algorithm === \"merge\") {\r\n            animation = mergeSortAnimation(this.state.array, animation)\r\n        } else if (algorithm === \"insertion\") {\r\n            animation = insertionSortAnimation(this.state.array, animation)\r\n        }\r\n        console.log(animation)\r\n        for (let i = 0; i < animation.length - 1; ++i) {\r\n            const bars = document.getElementsByClassName('bar')\r\n            const [index, newHeight] = animation[i]\r\n            const indexStyle = bars[index].style\r\n            setTimeout(() => {\r\n                indexStyle.height = `${newHeight}px`\r\n            }, i * SPEED);\r\n            setTimeout(() => {\r\n                indexStyle.backgroundColor = \"red\"\r\n            }, i * SPEED);\r\n            setTimeout(() => {\r\n                indexStyle.backgroundColor = \"turquoise\"\r\n            }, i * SPEED + 8);\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                sorted: true,\r\n            })\r\n        }, animation.length * SPEED);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"header\">\r\n                    <span className=\"logo\">Sorting Algorithm Visualizer</span>\r\n                    <ul className=\"btns\">\r\n                        <li><button className=\"newArrBtn\" onClick={() => inProgress ? null : this.generateArray()}>Generate New Array</button></li>\r\n                        <li><button onClick={() => inProgress ? null : this.animateSortingAlgorithm(\"bubble\")}>Bubble Sort</button></li>\r\n                        <li><button onClick={() => inProgress ? null : this.animateSortingAlgorithm(\"quick\")}>Quick sort</button></li>\r\n                        <li><button onClick={() => inProgress ? null : this.animateSortingAlgorithm(\"heap\")}>Heap Sort</button></li>\r\n                        <li><button onClick={() => inProgress ? null : this.animationOtherAlgorithms(\"merge\")}>Merge Sort</button></li>\r\n                        <li><button onClick={() => inProgress ? null : this.animateSortingAlgorithm(\"selection\")}>Selection Sort</button></li>\r\n                        <li><button onClick={() => inProgress ? null : this.animationOtherAlgorithms(\"insertion\")}>Insertion Sort</button></li>\r\n                    </ul>\r\n                </nav>\r\n                <div className=\"container\">\r\n                    {this.state.array.map((i, key) =>\r\n                        <div\r\n                            className=\"bar\"\r\n                            key={key}\r\n                            style={{ height: `${i}px` }}\r\n                        />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Sorting algorithm to generate number within a specified range\r\n */\r\nconst randomNumber = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min)\r\n}\r\n\r\nexport default SortingArray;","export const bubbleSortAnimation = (arr) => {\r\n    var animation = []//array to push indexes in\r\n    var n = arr.length\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let j = 0; j < n - i - 1; j++) {\r\n            let k = j + 1\r\n            if (arr[j] > arr[k]) {\r\n                const temp = arr[j]\r\n                arr[j] = arr[k];\r\n                arr[k] = temp;\r\n                animation.push([j, k, true])//these indexes will be swapped\r\n            } else {\r\n                animation.push([j, k, false])//these indexes will still be compared but not swapped\r\n            }\r\n        }\r\n    }\r\n    return animation\r\n}","export const selectionSortAnimation = (arr, animation) => {\r\n    const n = arr.length\r\n    for (let i = 0; i < n - 1; ++i) {\r\n        let min = i\r\n        for (let j = i + 1; j < n; ++j) {\r\n            if (arr[j] < arr[min]) {\r\n                min = j\r\n            }\r\n            //this is to show index j is being compare with the min value\r\n            animation.push([j, j, false])\r\n        }\r\n        const temp = arr[min]\r\n        arr[min] = arr[i]\r\n        arr[i] = temp\r\n        animation.push([min, i, true])//these indexes will still be swapped\r\n    }\r\n    return animation\r\n}","import React from 'react';\r\nimport SortingArray from \"./SortingArray\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingArray />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}